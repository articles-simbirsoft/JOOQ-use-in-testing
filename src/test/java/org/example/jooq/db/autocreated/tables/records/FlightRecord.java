/*
 * This file is generated by jOOQ.
 */
package org.example.jooq.db.autocreated.tables.records;


import java.time.LocalDateTime;

import org.example.jooq.db.autocreated.tables.Flight;
import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class FlightRecord extends UpdatableRecordImpl<FlightRecord> implements Record4<Integer, Long, Long, LocalDateTime> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.flight.id</code>.
     */
    public void setId(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.flight.id</code>.
     */
    public Integer getId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>public.flight.passenger</code>.
     */
    public void setPassenger(Long value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.flight.passenger</code>.
     */
    public Long getPassenger() {
        return (Long) get(1);
    }

    /**
     * Setter for <code>public.flight.airplane</code>.
     */
    public void setAirplane(Long value) {
        set(2, value);
    }

    /**
     * Getter for <code>public.flight.airplane</code>.
     */
    public Long getAirplane() {
        return (Long) get(2);
    }

    /**
     * Setter for <code>public.flight.datetime</code>.
     */
    public void setDatetime(LocalDateTime value) {
        set(3, value);
    }

    /**
     * Getter for <code>public.flight.datetime</code>.
     */
    public LocalDateTime getDatetime() {
        return (LocalDateTime) get(3);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, Long, Long, LocalDateTime> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    @Override
    public Row4<Integer, Long, Long, LocalDateTime> valuesRow() {
        return (Row4) super.valuesRow();
    }

    @Override
    public Field<Integer> field1() {
        return Flight.FLIGHT.ID;
    }

    @Override
    public Field<Long> field2() {
        return Flight.FLIGHT.PASSENGER;
    }

    @Override
    public Field<Long> field3() {
        return Flight.FLIGHT.AIRPLANE;
    }

    @Override
    public Field<LocalDateTime> field4() {
        return Flight.FLIGHT.DATETIME;
    }

    @Override
    public Integer component1() {
        return getId();
    }

    @Override
    public Long component2() {
        return getPassenger();
    }

    @Override
    public Long component3() {
        return getAirplane();
    }

    @Override
    public LocalDateTime component4() {
        return getDatetime();
    }

    @Override
    public Integer value1() {
        return getId();
    }

    @Override
    public Long value2() {
        return getPassenger();
    }

    @Override
    public Long value3() {
        return getAirplane();
    }

    @Override
    public LocalDateTime value4() {
        return getDatetime();
    }

    @Override
    public FlightRecord value1(Integer value) {
        setId(value);
        return this;
    }

    @Override
    public FlightRecord value2(Long value) {
        setPassenger(value);
        return this;
    }

    @Override
    public FlightRecord value3(Long value) {
        setAirplane(value);
        return this;
    }

    @Override
    public FlightRecord value4(LocalDateTime value) {
        setDatetime(value);
        return this;
    }

    @Override
    public FlightRecord values(Integer value1, Long value2, Long value3, LocalDateTime value4) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached FlightRecord
     */
    public FlightRecord() {
        super(Flight.FLIGHT);
    }

    /**
     * Create a detached, initialised FlightRecord
     */
    public FlightRecord(Integer id, Long passenger, Long airplane, LocalDateTime datetime) {
        super(Flight.FLIGHT);

        setId(id);
        setPassenger(passenger);
        setAirplane(airplane);
        setDatetime(datetime);
        resetChangedOnNotNull();
    }
}
