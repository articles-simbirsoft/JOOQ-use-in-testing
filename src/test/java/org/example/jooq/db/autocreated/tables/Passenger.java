/*
 * This file is generated by jOOQ.
 */
package org.example.jooq.db.autocreated.tables;


import java.time.LocalDate;
import java.util.function.Function;

import org.example.jooq.db.autocreated.Keys;
import org.example.jooq.db.autocreated.Public;
import org.example.jooq.db.autocreated.tables.records.PassengerRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function4;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Passenger extends TableImpl<PassengerRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.passenger</code>
     */
    public static final Passenger PASSENGER = new Passenger();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PassengerRecord> getRecordType() {
        return PassengerRecord.class;
    }

    /**
     * The column <code>public.passenger.id</code>.
     */
    public final TableField<PassengerRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.passenger.fullname</code>.
     */
    public final TableField<PassengerRecord, String> FULLNAME = createField(DSL.name("fullname"), SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>public.passenger.passport_details</code>.
     */
    public final TableField<PassengerRecord, String> PASSPORT_DETAILS = createField(DSL.name("passport_details"), SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>public.passenger.birthdate</code>.
     */
    public final TableField<PassengerRecord, LocalDate> BIRTHDATE = createField(DSL.name("birthdate"), SQLDataType.LOCALDATE, this, "");

    private Passenger(Name alias, Table<PassengerRecord> aliased) {
        this(alias, aliased, null);
    }

    private Passenger(Name alias, Table<PassengerRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.passenger</code> table reference
     */
    public Passenger(String alias) {
        this(DSL.name(alias), PASSENGER);
    }

    /**
     * Create an aliased <code>public.passenger</code> table reference
     */
    public Passenger(Name alias) {
        this(alias, PASSENGER);
    }

    /**
     * Create a <code>public.passenger</code> table reference
     */
    public Passenger() {
        this(DSL.name("passenger"), null);
    }

    public <O extends Record> Passenger(Table<O> child, ForeignKey<O, PassengerRecord> key) {
        super(child, key, PASSENGER);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<PassengerRecord, Integer> getIdentity() {
        return (Identity<PassengerRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<PassengerRecord> getPrimaryKey() {
        return Keys.PASSENGER_PKEY;
    }

    @Override
    public Passenger as(String alias) {
        return new Passenger(DSL.name(alias), this);
    }

    @Override
    public Passenger as(Name alias) {
        return new Passenger(alias, this);
    }

    @Override
    public Passenger as(Table<?> alias) {
        return new Passenger(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Passenger rename(String name) {
        return new Passenger(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Passenger rename(Name name) {
        return new Passenger(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Passenger rename(Table<?> name) {
        return new Passenger(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, String, String, LocalDate> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function4<? super Integer, ? super String, ? super String, ? super LocalDate, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function4<? super Integer, ? super String, ? super String, ? super LocalDate, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
