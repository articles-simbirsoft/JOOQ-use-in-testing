/*
 * This file is generated by jOOQ.
 */
package org.example.jooq.db.autocreated;


import org.example.jooq.db.autocreated.tables.Airplane;
import org.example.jooq.db.autocreated.tables.Company;
import org.example.jooq.db.autocreated.tables.Databasechangeloglock;
import org.example.jooq.db.autocreated.tables.Flight;
import org.example.jooq.db.autocreated.tables.Model;
import org.example.jooq.db.autocreated.tables.Passenger;
import org.example.jooq.db.autocreated.tables.records.AirplaneRecord;
import org.example.jooq.db.autocreated.tables.records.CompanyRecord;
import org.example.jooq.db.autocreated.tables.records.DatabasechangeloglockRecord;
import org.example.jooq.db.autocreated.tables.records.FlightRecord;
import org.example.jooq.db.autocreated.tables.records.ModelRecord;
import org.example.jooq.db.autocreated.tables.records.PassengerRecord;
import org.jooq.ForeignKey;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;


/**
 * A class modelling foreign key relationships and constraints of tables in
 * public.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<AirplaneRecord> AIRPLANE_PKEY = Internal.createUniqueKey(Airplane.AIRPLANE, DSL.name("airplane_pkey"), new TableField[] { Airplane.AIRPLANE.ID }, true);
    public static final UniqueKey<CompanyRecord> COMPANY_PKEY = Internal.createUniqueKey(Company.COMPANY, DSL.name("company_pkey"), new TableField[] { Company.COMPANY.ID }, true);
    public static final UniqueKey<DatabasechangeloglockRecord> DATABASECHANGELOGLOCK_PKEY = Internal.createUniqueKey(Databasechangeloglock.DATABASECHANGELOGLOCK, DSL.name("databasechangeloglock_pkey"), new TableField[] { Databasechangeloglock.DATABASECHANGELOGLOCK.ID }, true);
    public static final UniqueKey<FlightRecord> FLIGHT_PKEY = Internal.createUniqueKey(Flight.FLIGHT, DSL.name("flight_pkey"), new TableField[] { Flight.FLIGHT.ID }, true);
    public static final UniqueKey<ModelRecord> MODEL_PKEY = Internal.createUniqueKey(Model.MODEL, DSL.name("model_pkey"), new TableField[] { Model.MODEL.ID }, true);
    public static final UniqueKey<PassengerRecord> PASSENGER_PKEY = Internal.createUniqueKey(Passenger.PASSENGER, DSL.name("passenger_pkey"), new TableField[] { Passenger.PASSENGER.ID }, true);

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------

    public static final ForeignKey<AirplaneRecord, ModelRecord> AIRPLANE__AIRPLANE_MODEL_FKEY = Internal.createForeignKey(Airplane.AIRPLANE, DSL.name("airplane_model_fkey"), new TableField[] { Airplane.AIRPLANE.MODEL }, Keys.MODEL_PKEY, new TableField[] { Model.MODEL.ID }, true);
    public static final ForeignKey<FlightRecord, AirplaneRecord> FLIGHT__FLIGHT_AIRPLANE_FKEY = Internal.createForeignKey(Flight.FLIGHT, DSL.name("flight_airplane_fkey"), new TableField[] { Flight.FLIGHT.AIRPLANE }, Keys.AIRPLANE_PKEY, new TableField[] { Airplane.AIRPLANE.ID }, true);
    public static final ForeignKey<FlightRecord, PassengerRecord> FLIGHT__FLIGHT_PASSENGER_FKEY = Internal.createForeignKey(Flight.FLIGHT, DSL.name("flight_passenger_fkey"), new TableField[] { Flight.FLIGHT.PASSENGER }, Keys.PASSENGER_PKEY, new TableField[] { Passenger.PASSENGER.ID }, true);
    public static final ForeignKey<ModelRecord, CompanyRecord> MODEL__MODEL_COMPANY_FKEY = Internal.createForeignKey(Model.MODEL, DSL.name("model_company_fkey"), new TableField[] { Model.MODEL.COMPANY }, Keys.COMPANY_PKEY, new TableField[] { Company.COMPANY.ID }, true);
}
