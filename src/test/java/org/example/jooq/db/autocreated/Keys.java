/*
 * This file is generated by jOOQ.
 */
package org.example.jooq.db.autocreated;


import org.example.jooq.db.autocreated.tables.Airplane;
import org.example.jooq.db.autocreated.tables.Company;
import org.example.jooq.db.autocreated.tables.Databasechangeloglock;
import org.example.jooq.db.autocreated.tables.Flight;
import org.example.jooq.db.autocreated.tables.Model;
import org.example.jooq.db.autocreated.tables.Passenger;
import org.example.jooq.db.autocreated.tables.records.AirplaneRecord;
import org.example.jooq.db.autocreated.tables.records.CompanyRecord;
import org.example.jooq.db.autocreated.tables.records.DatabasechangeloglockRecord;
import org.example.jooq.db.autocreated.tables.records.FlightRecord;
import org.example.jooq.db.autocreated.tables.records.ModelRecord;
import org.example.jooq.db.autocreated.tables.records.PassengerRecord;
import org.jooq.ForeignKey;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;


/**
 * A class modelling foreign key relationships and constraints of tables in
 * jooq_DB.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<AirplaneRecord> KEY_AIRPLANE_PRIMARY = Internal.createUniqueKey(Airplane.AIRPLANE, DSL.name("KEY_airplane_PRIMARY"), new TableField[] { Airplane.AIRPLANE.ID }, true);
    public static final UniqueKey<CompanyRecord> KEY_COMPANY_PRIMARY = Internal.createUniqueKey(Company.COMPANY, DSL.name("KEY_company_PRIMARY"), new TableField[] { Company.COMPANY.ID }, true);
    public static final UniqueKey<DatabasechangeloglockRecord> KEY_DATABASECHANGELOGLOCK_PRIMARY = Internal.createUniqueKey(Databasechangeloglock.DATABASECHANGELOGLOCK, DSL.name("KEY_DATABASECHANGELOGLOCK_PRIMARY"), new TableField[] { Databasechangeloglock.DATABASECHANGELOGLOCK.ID }, true);
    public static final UniqueKey<FlightRecord> KEY_FLIGHT_PRIMARY = Internal.createUniqueKey(Flight.FLIGHT, DSL.name("KEY_flight_PRIMARY"), new TableField[] { Flight.FLIGHT.ID }, true);
    public static final UniqueKey<ModelRecord> KEY_MODEL_PRIMARY = Internal.createUniqueKey(Model.MODEL, DSL.name("KEY_model_PRIMARY"), new TableField[] { Model.MODEL.ID }, true);
    public static final UniqueKey<PassengerRecord> KEY_PASSENGER_PRIMARY = Internal.createUniqueKey(Passenger.PASSENGER, DSL.name("KEY_passenger_PRIMARY"), new TableField[] { Passenger.PASSENGER.ID }, true);

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------

    public static final ForeignKey<AirplaneRecord, ModelRecord> AIRPLANE_IBFK_1 = Internal.createForeignKey(Airplane.AIRPLANE, DSL.name("airplane_ibfk_1"), new TableField[] { Airplane.AIRPLANE.MODEL }, Keys.KEY_MODEL_PRIMARY, new TableField[] { Model.MODEL.ID }, true);
    public static final ForeignKey<FlightRecord, PassengerRecord> FLIGHT_IBFK_1 = Internal.createForeignKey(Flight.FLIGHT, DSL.name("flight_ibfk_1"), new TableField[] { Flight.FLIGHT.PASSENGER }, Keys.KEY_PASSENGER_PRIMARY, new TableField[] { Passenger.PASSENGER.ID }, true);
    public static final ForeignKey<FlightRecord, AirplaneRecord> FLIGHT_IBFK_2 = Internal.createForeignKey(Flight.FLIGHT, DSL.name("flight_ibfk_2"), new TableField[] { Flight.FLIGHT.AIRPLANE }, Keys.KEY_AIRPLANE_PRIMARY, new TableField[] { Airplane.AIRPLANE.ID }, true);
    public static final ForeignKey<ModelRecord, CompanyRecord> MODEL_IBFK_1 = Internal.createForeignKey(Model.MODEL, DSL.name("model_ibfk_1"), new TableField[] { Model.MODEL.COMPANY }, Keys.KEY_COMPANY_PRIMARY, new TableField[] { Company.COMPANY.ID }, true);
}
